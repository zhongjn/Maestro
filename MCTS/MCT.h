#pragma once
#include <map>
#include <functional>
#include <vector>
#include "gomoku.h"

// TODO: may use move to avoid unnassary copy

class MCTNode
{
public:
	MCTNode(MCTNode* parent, double P, double V, GState* state);
	~MCTNode();

	MCTNode* select_best(double kucb);
	// args: (action, (probability, value)) tuples generated by NN and state update function and result function
	int expand(std::map<GAction*, std::pair<double, double>> actions);

	std::map<GAction*, MCTNode*> m_map;	// map from Action to child
	MCTNode* m_parent;					// parent node
	unsigned int m_N;					// visit cnt
	double m_P;							// prior probability
	double m_Q;							// action value Q
	double m_totalV;					// sum of V in subtree, used in calculating Q
	double m_V;							// value of this node
	GState* m_state;					// game state

private:
	inline double cal_UCB(double k)
	{
		return m_Q + m_P * k / (1 + m_N);
	}
	void backup();

};

class MCT
{
public:
	MCT(GState* init_state, double t, double kpi, double kucb);
	void simulate(std::function<std::map<GAction*, std::pair<double, double>>(GState*)> NN);
	// return pi
	std::map<GAction*, double> get_probabilities();
	void move(GAction* a);
	inline GState* cur_state()
	{
		return m_ptrcur->m_state;
	}

private:
	MCTNode* m_root;
	MCTNode* m_ptrcur;
	double m_t;
	double m_kpi;
	double m_kucb;
};